<h1>Music Library API</h1>
<h2>Backend Module for Manchester Codes<h2>

<p?>Creating a Music Library API which works in conjunction with MySQL. Making use of RESTful standards to allow CRUD (Create, Read, Update and Delete) operations.

API built using Node.js and Express to integrate MySQL functionality. Test Driven Development using Mocha testing framework.</p>

<h2>HTTP Routes</h2>
<h3>Artist</h3>
<ul>
<li>Create Artist - POST to '/artist'</li>
<li>Read all Artists - GET from '/artist'</li>
<li>Read one Artist ID - GET from '/artist/:id'</li>
<li>Update Artist - PATCH '/artist/:id'</li>
<li>Delete Artist - DELETE '/artist/:id'</li></ul>

Instructions
Pull and run a new MySQL Docker image docker run -d -p 3307:3306 --name music_library_mysql -e MYSQL_ROOT_PASSWORD=password mysql - make sure to change MYSQL_ROOT_PASSWORD to something more appropriate. This will be used in .env file.
Connect your MYSQL image to MYSQL Workbench application.
Clone this repo and chance into the directory
Run npm install
Create a .env file and add local variables: DB_PASSWORD, DB_NAME, DB_USER, DB_HOST, DB_PORT, PORT
Run npm start to start the project

Testing
For testing, create a .env.test file with same local variables - just make sure to change DB_NAME (e.g. mysql_music_library_test)
